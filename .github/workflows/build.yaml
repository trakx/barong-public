name: Docker Build and Publish

on:
  workflow_call:
    inputs:
      runner_name:
        description: "Name of runner to use."
        required: true
        default: "dev-trakx-runner"
        type: string
    outputs:
      tag:
        description: "The image tag"
        value: ${{ jobs.build_and_publish_docker_image.outputs.Tag}}

env:
  IMAGE_NAME: "barong"

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:    
      - uses: actions/checkout@v2

      - name: Bump version
        id: bumpVersion
        uses: trakx/bump-version-action/get-tag@v9.1.3
        with:
          semverIncrementLevel: ${{github.event.inputs.semverIncrementLevel}}

      - name: Build image and tag image
        run: |
          docker build . \
            --tag "docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME:${{steps.bumpVersion.outputs.fullVersion}}"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Publish to GPR
        run: |
          docker push "docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME:${{steps.bumpVersion.outputs.fullVersion}}"

      - name: Push version tag
        id: pushTag
        uses: trakx/bump-version-action/push-tag@v9.1.3
        with:
          tag: v${{steps.bumpVersion.outputs.fullVersion}}
          githubToken: ${{secrets.GITHUB_TOKEN}}

      # Since github runners working in Docker-in-Docker mode we need this workaround
      - name: install kubectl and kustomize
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Select namespace from environment
        id: select_namespace_from_env
        run: |
          if [ "${{ inputs.runner_name }}" = "dev-trakx-runner" ]; then
            echo "::set-output name=namespace::dev-trakx"
          elif [ "${{ inputs.runner_name }}" = "stage-trakx-runner" ]; then
            echo "::set-output name=namespace::stage-trakx"
          elif [ "${{ inputs.runner_name }}" = "prod-trak-runner" ]; then
            echo "::set-output name=namespace::prod-trakx"
          else
            echo "::set-output name=namespace::dev-trakx"
          fi

      - name: Update barong deployment
        run: |
          kubectl set image deployment/barong -n ${{steps.select_namespace_from_env.outputs.namespace}} barong="docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME:${{steps.bumpVersion.outputs.fullVersion}}"
    outputs:
      tag: ${{steps.bumpVersion.outputs.fullVersion}}
